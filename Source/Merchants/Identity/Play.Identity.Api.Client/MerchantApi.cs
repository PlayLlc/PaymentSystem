/* 
 * Identity Authentication Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Collections.ObjectModel;

using Play.Identity.Contracts.Commands;
using Play.Identity.Contracts.Dtos;
using Play.Restful.Clients;

using RestSharp.Portable;

namespace Play.Identity.Api.Client;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class MerchantApi : IMerchantApi
{
    #region Instance Values

    private ExceptionFactory _ExceptionFactory = (name, response) => null;

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public Configuration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if ((_ExceptionFactory != null) && (_ExceptionFactory.GetInvocationList().Length > 1))
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

            return _ExceptionFactory;
        }
        set => _ExceptionFactory = value;
    }

    #endregion

    #region Constructor

    /// <summary>
    ///     Initializes a new instance of the <see cref="MerchantApi" /> class.
    /// </summary>
    /// <returns></returns>
    public MerchantApi(string basePath)
    {
        Configuration = new(basePath);

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="MerchantApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public MerchantApi(Configuration configuration)
    {
        Configuration = configuration;

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    #endregion

    #region Instance Members

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath() => Configuration.ApiClient.RestClient.BaseUrl.ToString();

    /// <summary>
    ///     Sets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
    public void SetBasePath(string basePath)
    {
        // do nothing
    }

    /// <summary>
    ///     Gets the default header.
    /// </summary>
    /// <returns>Dictionary of HTTP header</returns>
    [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
    public IDictionary<string, string> DefaultHeader() => new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns></returns>
    public void AddressMerchant(UpdateAddressCommand body = null)
    {
        AddressMerchantWithHttpInfo(body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AddressMerchantWithHttpInfo(UpdateAddressCommand body = null)
    {
        string localVarPath = "./Merchant/Address";
        Dictionary<string, string> localVarPathParams = new();
        List<KeyValuePair<string, string>> localVarQueryParams = new();
        Dictionary<string, string> localVarHeaderParams = new(Configuration.DefaultHeader);
        Dictionary<string, string> localVarFormParams = new();
        Dictionary<string, FileParameter> localVarFileParams = new();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = {"application/json", "text/json", "application/_*+json"};
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = { };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if ((body != null) && (body.GetType() != typeof(byte[])))
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        else
            localVarPostBody = body; // byte array

        // make the HTTP request
        IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.PUT, localVarQueryParams, localVarPostBody,
            localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int) localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("AddressMerchant", localVarResponse);

            if (exception != null)
                throw exception;
        }

        return new(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns>Task of void</returns>
    public async Task AddressMerchantAsync(UpdateAddressCommand body = null)
    {
        await AddressMerchantAsyncWithHttpInfo(body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AddressMerchantAsyncWithHttpInfo(UpdateAddressCommand body = null)
    {
        string localVarPath = "./Merchant/Address";
        Dictionary<string, string> localVarPathParams = new();
        List<KeyValuePair<string, string>> localVarQueryParams = new();
        Dictionary<string, string> localVarHeaderParams = new(Configuration.DefaultHeader);
        Dictionary<string, string> localVarFormParams = new();
        Dictionary<string, FileParameter> localVarFileParams = new();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = {"application/json", "text/json", "application/_*+json"};
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = { };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if ((body != null) && (body.GetType() != typeof(byte[])))
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        else
            localVarPostBody = body; // byte array

        // make the HTTP request
        IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.PUT, localVarQueryParams,
            localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int) localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("AddressMerchant", localVarResponse);

            if (exception != null)
                throw exception;
        }

        return new(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns></returns>
    public void BusinessInfoMerchant(UpdateMerchantBusinessInfo body = null)
    {
        BusinessInfoMerchantWithHttpInfo(body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> BusinessInfoMerchantWithHttpInfo(UpdateMerchantBusinessInfo body = null)
    {
        string localVarPath = "./Merchant/BusinessInfo";
        Dictionary<string, string> localVarPathParams = new();
        List<KeyValuePair<string, string>> localVarQueryParams = new();
        Dictionary<string, string> localVarHeaderParams = new(Configuration.DefaultHeader);
        Dictionary<string, string> localVarFormParams = new();
        Dictionary<string, FileParameter> localVarFileParams = new();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = {"application/json", "text/json", "application/_*+json"};
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = { };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if ((body != null) && (body.GetType() != typeof(byte[])))
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        else
            localVarPostBody = body; // byte array

        // make the HTTP request
        IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.PUT, localVarQueryParams, localVarPostBody,
            localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int) localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("BusinessInfoMerchant", localVarResponse);

            if (exception != null)
                throw exception;
        }

        return new(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns>Task of void</returns>
    public async Task BusinessInfoMerchantAsync(UpdateMerchantBusinessInfo body = null)
    {
        await BusinessInfoMerchantAsyncWithHttpInfo(body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> BusinessInfoMerchantAsyncWithHttpInfo(UpdateMerchantBusinessInfo body = null)
    {
        string localVarPath = "./Merchant/BusinessInfo";
        Dictionary<string, string> localVarPathParams = new();
        List<KeyValuePair<string, string>> localVarQueryParams = new();
        Dictionary<string, string> localVarHeaderParams = new(Configuration.DefaultHeader);
        Dictionary<string, string> localVarFormParams = new();
        Dictionary<string, FileParameter> localVarFileParams = new();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = {"application/json", "text/json", "application/_*+json"};
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = { };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if ((body != null) && (body.GetType() != typeof(byte[])))
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        else
            localVarPostBody = body; // byte array

        // make the HTTP request
        IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.PUT, localVarQueryParams,
            localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int) localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("BusinessInfoMerchant", localVarResponse);

            if (exception != null)
                throw exception;
        }

        return new(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns></returns>
    public void CompanyNameMerchant(UpdateMerchantCompanyName body = null)
    {
        CompanyNameMerchantWithHttpInfo(body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> CompanyNameMerchantWithHttpInfo(UpdateMerchantCompanyName body = null)
    {
        string localVarPath = "./Merchant/CompanyName";
        Dictionary<string, string> localVarPathParams = new();
        List<KeyValuePair<string, string>> localVarQueryParams = new();
        Dictionary<string, string> localVarHeaderParams = new(Configuration.DefaultHeader);
        Dictionary<string, string> localVarFormParams = new();
        Dictionary<string, FileParameter> localVarFileParams = new();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = {"application/json", "text/json", "application/_*+json"};
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = { };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if ((body != null) && (body.GetType() != typeof(byte[])))
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        else
            localVarPostBody = body; // byte array

        // make the HTTP request
        IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.PUT, localVarQueryParams, localVarPostBody,
            localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int) localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("CompanyNameMerchant", localVarResponse);

            if (exception != null)
                throw exception;
        }

        return new(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns>Task of void</returns>
    public async Task CompanyNameMerchantAsync(UpdateMerchantCompanyName body = null)
    {
        await CompanyNameMerchantAsyncWithHttpInfo(body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"> (optional)</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> CompanyNameMerchantAsyncWithHttpInfo(UpdateMerchantCompanyName body = null)
    {
        string localVarPath = "./Merchant/CompanyName";
        Dictionary<string, string> localVarPathParams = new();
        List<KeyValuePair<string, string>> localVarQueryParams = new();
        Dictionary<string, string> localVarHeaderParams = new(Configuration.DefaultHeader);
        Dictionary<string, string> localVarFormParams = new();
        Dictionary<string, FileParameter> localVarFileParams = new();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = {"application/json", "text/json", "application/_*+json"};
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = { };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if ((body != null) && (body.GetType() != typeof(byte[])))
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        else
            localVarPostBody = body; // byte array

        // make the HTTP request
        IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.PUT, localVarQueryParams,
            localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int) localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("CompanyNameMerchant", localVarResponse);

            if (exception != null)
                throw exception;
        }

        return new(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"> (optional)</param>
    /// <returns>MerchantDto</returns>
    public MerchantDto GetMerchant(string id = null)
    {
        ApiResponse<MerchantDto> localVarResponse = GetMerchantWithHttpInfo(id);

        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"> (optional)</param>
    /// <returns>ApiResponse of MerchantDto</returns>
    public ApiResponse<MerchantDto> GetMerchantWithHttpInfo(string id = null)
    {
        string localVarPath = "./Merchant";
        Dictionary<string, string> localVarPathParams = new();
        List<KeyValuePair<string, string>> localVarQueryParams = new();
        Dictionary<string, string> localVarHeaderParams = new(Configuration.DefaultHeader);
        Dictionary<string, string> localVarFormParams = new();
        Dictionary<string, FileParameter> localVarFileParams = new();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = { };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = {"text/plain", "application/json", "text/json"};
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (id != null)
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

        // make the HTTP request
        IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.GET, localVarQueryParams, localVarPostBody,
            localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int) localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("IndexMerchant", localVarResponse);

            if (exception != null)
                throw exception;
        }

        return new(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
            (MerchantDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantDto)));
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"> (optional)</param>
    /// <returns>Task of MerchantDto</returns>
    public async Task<MerchantDto> GetMerchantAsync(string id = null)
    {
        ApiResponse<MerchantDto> localVarResponse = await GetMerchantAsyncWithHttpInfo(id);

        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"> (optional)</param>
    /// <returns>Task of ApiResponse (MerchantDto)</returns>
    public async Task<ApiResponse<MerchantDto>> GetMerchantAsyncWithHttpInfo(string id = null)
    {
        string localVarPath = "./Merchant";
        Dictionary<string, string> localVarPathParams = new();
        List<KeyValuePair<string, string>> localVarQueryParams = new();
        Dictionary<string, string> localVarHeaderParams = new(Configuration.DefaultHeader);
        Dictionary<string, string> localVarFormParams = new();
        Dictionary<string, FileParameter> localVarFileParams = new();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = { };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = {"text/plain", "application/json", "text/json"};
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (id != null)
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

        // make the HTTP request
        IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.GET, localVarQueryParams,
            localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int) localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("IndexMerchant", localVarResponse);

            if (exception != null)
                throw exception;
        }

        return new(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
            (MerchantDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantDto)));
    }

    #endregion
}