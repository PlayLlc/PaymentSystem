// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

using Play.Loyalty.Persistence.Sql.Persistence;

#nullable disable

namespace Play.Inventory.Persistence.Sql.Migrations
{
    [DbContext(typeof(LoyaltyDbContext))]
    partial class InventoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Play.Inventory.Domain.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_MerchantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MerchantId");

                    b.Property<string>("_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Play.Inventory.Domain.Entities.Alerts", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LowInventoryThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Alerts", (string)null);
                });

            modelBuilder.Entity("Play.Inventory.Domain.Entities.Locations", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("_AllLocations")
                        .HasColumnType("bit")
                        .HasColumnName("AllLocations");

                    b.HasKey("Id");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("Play.Inventory.Domain.Entities.Price", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<ushort>("NumericCurrencyCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Prices", (string)null);
                });

            modelBuilder.Entity("Play.Inventory.Domain.Entities.Store", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationsId");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("Play.Inventory.Domain.Entities.Variation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PriceId");

                    b.ToTable("Variations", (string)null);
                });

            modelBuilder.Entity("Play.Inventory.Domain.Item", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_AlertsId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AlertsId");

                    b.Property<string>("_CategoriesId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoriesId");

                    b.Property<string>("_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("_LocationsId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("LocationsId");

                    b.Property<string>("_MerchantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MerchantId");

                    b.Property<string>("_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("_PriceId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PriceId");

                    b.Property<int>("_Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<string>("_Sku")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Sku");

                    b.Property<string>("_VariationsId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VariationsId");

                    b.HasKey("Id");

                    b.HasIndex("_AlertsId");

                    b.HasIndex("_LocationsId");

                    b.HasIndex("_PriceId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Play.Inventory.Domain.ValueObjects.StockAction", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Value");

                    b.ToTable("StockActions", (string)null);

                    b.HasData(
                        new
                        {
                            Value = "Restock"
                        },
                        new
                        {
                            Value = "Return"
                        },
                        new
                        {
                            Value = "Shrinkage"
                        },
                        new
                        {
                            Value = "Sold"
                        });
                });

            modelBuilder.Entity("Play.Inventory.Domain.Category", b =>
                {
                    b.HasOne("Play.Inventory.Domain.Item", null)
                        .WithMany("_Categories")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Play.Inventory.Domain.Entities.Store", b =>
                {
                    b.HasOne("Play.Inventory.Domain.Entities.Locations", null)
                        .WithMany("_Stores")
                        .HasForeignKey("LocationsId");
                });

            modelBuilder.Entity("Play.Inventory.Domain.Entities.Variation", b =>
                {
                    b.HasOne("Play.Inventory.Domain.Item", null)
                        .WithMany("_Variations")
                        .HasForeignKey("ItemId");

                    b.HasOne("Play.Inventory.Domain.Entities.Price", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Play.Inventory.Domain.Item", b =>
                {
                    b.HasOne("Play.Inventory.Domain.Entities.Alerts", "_Alerts")
                        .WithMany()
                        .HasForeignKey("_AlertsId");

                    b.HasOne("Play.Inventory.Domain.Entities.Locations", "_Locations")
                        .WithMany()
                        .HasForeignKey("_LocationsId");

                    b.HasOne("Play.Inventory.Domain.Entities.Price", "_Price")
                        .WithMany()
                        .HasForeignKey("_PriceId");

                    b.Navigation("_Alerts");

                    b.Navigation("_Locations");

                    b.Navigation("_Price");
                });

            modelBuilder.Entity("Play.Inventory.Domain.Entities.Locations", b =>
                {
                    b.Navigation("_Stores");
                });

            modelBuilder.Entity("Play.Inventory.Domain.Item", b =>
                {
                    b.Navigation("_Categories");

                    b.Navigation("_Variations");
                });
#pragma warning restore 612, 618
        }
    }
}
