/* 
 * Inventory
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

using RestSharp.Portable;

using Play.Inventory.Contracts.Commands;
using Play.Inventory.Contracts.Dtos;
using Play.Restful.Clients;

namespace IO.Swagger.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemsApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsAlertsActivateAlertsPut(string itemId, UpdateItemAlerts body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsAlertsActivateAlertsPutWithHttpInfo(string itemId, UpdateItemAlerts body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsAlertsDeaticvateAlertsPut(string itemId, UpdateItemAlerts body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsAlertsDeaticvateAlertsPutWithHttpInfo(string itemId, UpdateItemAlerts body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsAlertsUpdateLowInventoryThresholdPut(string itemId, UpdateLowInventoryThresholdAlert body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsAlertsUpdateLowInventoryThresholdPutWithHttpInfo(string itemId, UpdateLowInventoryThresholdAlert body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsCategoriesAddPost(string itemId, UpdateItemCategories body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsCategoriesAddPostWithHttpInfo(string itemId, UpdateItemCategories body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsCategoriesRemoveDelete(string itemId, UpdateItemCategories body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsCategoriesRemoveDeleteWithHttpInfo(string itemId, UpdateItemCategories body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsHomeDescriptionPut(string itemId, UpdateItemDescription body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsHomeDescriptionPutWithHttpInfo(string itemId, UpdateItemDescription body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>ItemDto</returns>
        ItemDto ItemsHomeGetItemGet(string itemId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>ApiResponse of ItemDto</returns>
        ApiResponse<ItemDto> ItemsHomeGetItemGetWithHttpInfo(string itemId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <returns>List&lt;ItemDto&gt;</returns>
        List<ItemDto> ItemsHomeGetItemsGet(string merchantId = null, int? pageSize = null, int? position = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemDto&gt;</returns>
        ApiResponse<List<ItemDto>> ItemsHomeGetItemsGetWithHttpInfo(string merchantId = null, int? pageSize = null, int? position = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsHomeNamePut(string itemId, UpdateItemName body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsHomeNamePutWithHttpInfo(string itemId, UpdateItemName body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsHomeRemoveDelete(string itemId, RemoveItem body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsHomeRemoveDeleteWithHttpInfo(string itemId, RemoveItem body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsLocationsAddPost(string itemId, UpdateItemLocations body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsLocationsAddPostWithHttpInfo(string itemId, UpdateItemLocations body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsLocationsRemoveDelete(string itemId, UpdateItemLocations body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsLocationsRemoveDeleteWithHttpInfo(string itemId, UpdateItemLocations body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsLocationsSetAllPut(string itemId, SetAllLocationsForItem body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsLocationsSetAllPutWithHttpInfo(string itemId, SetAllLocationsForItem body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsVariationsCreateVariationPost(string itemId, CreateVariation body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsVariationsCreateVariationPostWithHttpInfo(string itemId, CreateVariation body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsVariationsNamePut(string itemId, string variationId, UpdateItemVariationName body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsVariationsNamePutWithHttpInfo(string itemId, string variationId, UpdateItemVariationName body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ItemsVariationsRemoveVariationDelete(string itemId, string variationId, RemoveVariation body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ItemsVariationsRemoveVariationDeleteWithHttpInfo(string itemId, string variationId, RemoveVariation body = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsAlertsActivateAlertsPutAsync(string itemId, UpdateItemAlerts body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsAlertsActivateAlertsPutAsyncWithHttpInfo(string itemId, UpdateItemAlerts body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsAlertsDeaticvateAlertsPutAsync(string itemId, UpdateItemAlerts body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsAlertsDeaticvateAlertsPutAsyncWithHttpInfo(string itemId, UpdateItemAlerts body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsAlertsUpdateLowInventoryThresholdPutAsync(string itemId, UpdateLowInventoryThresholdAlert body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsAlertsUpdateLowInventoryThresholdPutAsyncWithHttpInfo(string itemId, UpdateLowInventoryThresholdAlert body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsCategoriesAddPostAsync(string itemId, UpdateItemCategories body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsCategoriesAddPostAsyncWithHttpInfo(string itemId, UpdateItemCategories body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsCategoriesRemoveDeleteAsync(string itemId, UpdateItemCategories body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsCategoriesRemoveDeleteAsyncWithHttpInfo(string itemId, UpdateItemCategories body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsHomeDescriptionPutAsync(string itemId, UpdateItemDescription body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsHomeDescriptionPutAsyncWithHttpInfo(string itemId, UpdateItemDescription body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>Task of ItemDto</returns>
        Task<ItemDto> ItemsHomeGetItemGetAsync(string itemId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>Task of ApiResponse (ItemDto)</returns>
        Task<ApiResponse<ItemDto>> ItemsHomeGetItemGetAsyncWithHttpInfo(string itemId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <returns>Task of List&lt;ItemDto&gt;</returns>
        Task<List<ItemDto>> ItemsHomeGetItemsGetAsync(string merchantId = null, int? pageSize = null, int? position = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemDto&gt;)</returns>
        Task<ApiResponse<List<ItemDto>>> ItemsHomeGetItemsGetAsyncWithHttpInfo(string merchantId = null, int? pageSize = null, int? position = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsHomeNamePutAsync(string itemId, UpdateItemName body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsHomeNamePutAsyncWithHttpInfo(string itemId, UpdateItemName body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsHomeRemoveDeleteAsync(string itemId, RemoveItem body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsHomeRemoveDeleteAsyncWithHttpInfo(string itemId, RemoveItem body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsLocationsAddPostAsync(string itemId, UpdateItemLocations body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsLocationsAddPostAsyncWithHttpInfo(string itemId, UpdateItemLocations body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsLocationsRemoveDeleteAsync(string itemId, UpdateItemLocations body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsLocationsRemoveDeleteAsyncWithHttpInfo(string itemId, UpdateItemLocations body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsLocationsSetAllPutAsync(string itemId, SetAllLocationsForItem body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsLocationsSetAllPutAsyncWithHttpInfo(string itemId, SetAllLocationsForItem body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsVariationsCreateVariationPostAsync(string itemId, CreateVariation body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsVariationsCreateVariationPostAsyncWithHttpInfo(string itemId, CreateVariation body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsVariationsNamePutAsync(string itemId, string variationId, UpdateItemVariationName body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsVariationsNamePutAsyncWithHttpInfo(string itemId, string variationId, UpdateItemVariationName body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        Task ItemsVariationsRemoveVariationDeleteAsync(string itemId, string variationId, RemoveVariation body = null);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ItemsVariationsRemoveVariationDeleteAsyncWithHttpInfo(string itemId, string variationId, RemoveVariation body = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemsApi : IItemsApi
    {
        #region Instance Values

        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if ((_exceptionFactory != null) && (_exceptionFactory.GetInvocationList().Length > 1))
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        #endregion

        #region Constructor

        /// <summary>
        ///     Initializes a new instance of the <see cref="ItemsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public ItemsApi(string basePath)
        {
            Configuration = new Configuration(basePath);

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ItemsApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemsApi(Configuration configuration)
        {
            Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        #endregion

        #region Instance Members

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        ///     Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        ///     Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsAlertsActivateAlertsPut(string itemId, UpdateItemAlerts body = null)
        {
            ItemsAlertsActivateAlertsPutWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsAlertsActivateAlertsPutWithHttpInfo(string itemId, UpdateItemAlerts body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsAlertsActivateAlertsPut");

            var localVarPath = "./Inventory/Items/{itemId}/Alerts/ActivateAlerts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.PUT, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsAlertsActivateAlertsPut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsAlertsActivateAlertsPutAsync(string itemId, UpdateItemAlerts body = null)
        {
            await ItemsAlertsActivateAlertsPutAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsAlertsActivateAlertsPutAsyncWithHttpInfo(string itemId, UpdateItemAlerts body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsAlertsActivateAlertsPut");

            var localVarPath = "./Inventory/Items/{itemId}/Alerts/ActivateAlerts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.PUT, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsAlertsActivateAlertsPut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsAlertsDeaticvateAlertsPut(string itemId, UpdateItemAlerts body = null)
        {
            ItemsAlertsDeaticvateAlertsPutWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsAlertsDeaticvateAlertsPutWithHttpInfo(string itemId, UpdateItemAlerts body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsAlertsDeaticvateAlertsPut");

            var localVarPath = "./Inventory/Items/{itemId}/Alerts/DeaticvateAlerts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.PUT, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsAlertsDeaticvateAlertsPut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsAlertsDeaticvateAlertsPutAsync(string itemId, UpdateItemAlerts body = null)
        {
            await ItemsAlertsDeaticvateAlertsPutAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsAlertsDeaticvateAlertsPutAsyncWithHttpInfo(string itemId, UpdateItemAlerts body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsAlertsDeaticvateAlertsPut");

            var localVarPath = "./Inventory/Items/{itemId}/Alerts/DeaticvateAlerts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.PUT, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsAlertsDeaticvateAlertsPut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsAlertsUpdateLowInventoryThresholdPut(string itemId, UpdateLowInventoryThresholdAlert body = null)
        {
            ItemsAlertsUpdateLowInventoryThresholdPutWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsAlertsUpdateLowInventoryThresholdPutWithHttpInfo(string itemId, UpdateLowInventoryThresholdAlert body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsAlertsUpdateLowInventoryThresholdPut");

            var localVarPath = "./Inventory/Items/{itemId}/Alerts/UpdateLowInventoryThreshold";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.PUT, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsAlertsUpdateLowInventoryThresholdPut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsAlertsUpdateLowInventoryThresholdPutAsync(string itemId, UpdateLowInventoryThresholdAlert body = null)
        {
            await ItemsAlertsUpdateLowInventoryThresholdPutAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsAlertsUpdateLowInventoryThresholdPutAsyncWithHttpInfo(
            string itemId, UpdateLowInventoryThresholdAlert body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsAlertsUpdateLowInventoryThresholdPut");

            var localVarPath = "./Inventory/Items/{itemId}/Alerts/UpdateLowInventoryThreshold";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.PUT, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsAlertsUpdateLowInventoryThresholdPut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsCategoriesAddPost(string itemId, UpdateItemCategories body = null)
        {
            ItemsCategoriesAddPostWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsCategoriesAddPostWithHttpInfo(string itemId, UpdateItemCategories body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsCategoriesAddPost");

            var localVarPath = "./Inventory/Items/{itemId}/Categories";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.POST, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsCategoriesAddPost", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsCategoriesAddPostAsync(string itemId, UpdateItemCategories body = null)
        {
            await ItemsCategoriesAddPostAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsCategoriesAddPostAsyncWithHttpInfo(string itemId, UpdateItemCategories body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsCategoriesAddPost");

            var localVarPath = "./Inventory/Items/{itemId}/Categories";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.POST, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsCategoriesAddPost", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsCategoriesRemoveDelete(string itemId, UpdateItemCategories body = null)
        {
            ItemsCategoriesRemoveDeleteWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsCategoriesRemoveDeleteWithHttpInfo(string itemId, UpdateItemCategories body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsCategoriesRemoveDelete");

            var localVarPath = "./Inventory/Items/{itemId}/Categories";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.DELETE, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsCategoriesRemoveDelete", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsCategoriesRemoveDeleteAsync(string itemId, UpdateItemCategories body = null)
        {
            await ItemsCategoriesRemoveDeleteAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsCategoriesRemoveDeleteAsyncWithHttpInfo(string itemId, UpdateItemCategories body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsCategoriesRemoveDelete");

            var localVarPath = "./Inventory/Items/{itemId}/Categories";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.DELETE, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsCategoriesRemoveDelete", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsHomeDescriptionPut(string itemId, UpdateItemDescription body = null)
        {
            ItemsHomeDescriptionPutWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsHomeDescriptionPutWithHttpInfo(string itemId, UpdateItemDescription body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsHomeDescriptionPut");

            var localVarPath = "./Inventory/Items/{itemId}/Description";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.PUT, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsHomeDescriptionPut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsHomeDescriptionPutAsync(string itemId, UpdateItemDescription body = null)
        {
            await ItemsHomeDescriptionPutAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsHomeDescriptionPutAsyncWithHttpInfo(string itemId, UpdateItemDescription body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsHomeDescriptionPut");

            var localVarPath = "./Inventory/Items/{itemId}/Description";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.PUT, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsHomeDescriptionPut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>ItemDto</returns>
        public ItemDto ItemsHomeGetItemGet(string itemId)
        {
            ApiResponse<ItemDto> localVarResponse = ItemsHomeGetItemGetWithHttpInfo(itemId);

            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>ApiResponse of ItemDto</returns>
        public ApiResponse<ItemDto> ItemsHomeGetItemGetWithHttpInfo(string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsHomeGetItemGet");

            var localVarPath = "./Inventory/Items/{itemId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] { };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {"text/plain", "application/json", "text/json"};
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.GET, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsHomeGetItemGet", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<ItemDto>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDto)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>Task of ItemDto</returns>
        public async Task<ItemDto> ItemsHomeGetItemGetAsync(string itemId)
        {
            ApiResponse<ItemDto> localVarResponse = await ItemsHomeGetItemGetAsyncWithHttpInfo(itemId);

            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>Task of ApiResponse (ItemDto)</returns>
        public async Task<ApiResponse<ItemDto>> ItemsHomeGetItemGetAsyncWithHttpInfo(string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsHomeGetItemGet");

            var localVarPath = "./Inventory/Items/{itemId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] { };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {"text/plain", "application/json", "text/json"};
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.GET, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsHomeGetItemGet", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<ItemDto>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDto)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <returns>List&lt;ItemDto&gt;</returns>
        public List<ItemDto> ItemsHomeGetItemsGet(string merchantId = null, int? pageSize = null, int? position = null)
        {
            ApiResponse<List<ItemDto>> localVarResponse = ItemsHomeGetItemsGetWithHttpInfo(merchantId, pageSize, position);

            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemDto&gt;</returns>
        public ApiResponse<List<ItemDto>> ItemsHomeGetItemsGetWithHttpInfo(string merchantId = null, int? pageSize = null, int? position = null)
        {
            var localVarPath = "./Inventory/Items";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] { };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {"text/plain", "application/json", "text/json"};
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null)
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "merchantId", merchantId)); // query parameter
            if (pageSize != null)
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (position != null)
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.GET, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsHomeGetItemsGet", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<List<ItemDto>>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ItemDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemDto>)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <returns>Task of List&lt;ItemDto&gt;</returns>
        public async Task<List<ItemDto>> ItemsHomeGetItemsGetAsync(string merchantId = null, int? pageSize = null, int? position = null)
        {
            ApiResponse<List<ItemDto>> localVarResponse = await ItemsHomeGetItemsGetAsyncWithHttpInfo(merchantId, pageSize, position);

            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemDto&gt;)</returns>
        public async Task<ApiResponse<List<ItemDto>>> ItemsHomeGetItemsGetAsyncWithHttpInfo(
            string merchantId = null, int? pageSize = null, int? position = null)
        {
            var localVarPath = "./Inventory/Items";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] { };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {"text/plain", "application/json", "text/json"};
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null)
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "merchantId", merchantId)); // query parameter
            if (pageSize != null)
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (position != null)
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.GET, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsHomeGetItemsGet", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<List<ItemDto>>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ItemDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemDto>)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsHomeNamePut(string itemId, UpdateItemName body = null)
        {
            ItemsHomeNamePutWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsHomeNamePutWithHttpInfo(string itemId, UpdateItemName body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsHomeNamePut");

            var localVarPath = "./Inventory/Items/{itemId}/Name";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.PUT, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsHomeNamePut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsHomeNamePutAsync(string itemId, UpdateItemName body = null)
        {
            await ItemsHomeNamePutAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsHomeNamePutAsyncWithHttpInfo(string itemId, UpdateItemName body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsHomeNamePut");

            var localVarPath = "./Inventory/Items/{itemId}/Name";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.PUT, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsHomeNamePut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsHomeRemoveDelete(string itemId, RemoveItem body = null)
        {
            ItemsHomeRemoveDeleteWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsHomeRemoveDeleteWithHttpInfo(string itemId, RemoveItem body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsHomeRemoveDelete");

            var localVarPath = "./Inventory/Items/{itemId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.DELETE, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsHomeRemoveDelete", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsHomeRemoveDeleteAsync(string itemId, RemoveItem body = null)
        {
            await ItemsHomeRemoveDeleteAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsHomeRemoveDeleteAsyncWithHttpInfo(string itemId, RemoveItem body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsHomeRemoveDelete");

            var localVarPath = "./Inventory/Items/{itemId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.DELETE, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsHomeRemoveDelete", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsLocationsAddPost(string itemId, UpdateItemLocations body = null)
        {
            ItemsLocationsAddPostWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsLocationsAddPostWithHttpInfo(string itemId, UpdateItemLocations body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsLocationsAddPost");

            var localVarPath = "./Inventory/Items/{itemId}/Locations";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.POST, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsLocationsAddPost", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsLocationsAddPostAsync(string itemId, UpdateItemLocations body = null)
        {
            await ItemsLocationsAddPostAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsLocationsAddPostAsyncWithHttpInfo(string itemId, UpdateItemLocations body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsLocationsAddPost");

            var localVarPath = "./Inventory/Items/{itemId}/Locations";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.POST, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsLocationsAddPost", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsLocationsRemoveDelete(string itemId, UpdateItemLocations body = null)
        {
            ItemsLocationsRemoveDeleteWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsLocationsRemoveDeleteWithHttpInfo(string itemId, UpdateItemLocations body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsLocationsRemoveDelete");

            var localVarPath = "./Inventory/Items/{itemId}/Locations";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.DELETE, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsLocationsRemoveDelete", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsLocationsRemoveDeleteAsync(string itemId, UpdateItemLocations body = null)
        {
            await ItemsLocationsRemoveDeleteAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsLocationsRemoveDeleteAsyncWithHttpInfo(string itemId, UpdateItemLocations body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsLocationsRemoveDelete");

            var localVarPath = "./Inventory/Items/{itemId}/Locations";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.DELETE, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsLocationsRemoveDelete", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsLocationsSetAllPut(string itemId, SetAllLocationsForItem body = null)
        {
            ItemsLocationsSetAllPutWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsLocationsSetAllPutWithHttpInfo(string itemId, SetAllLocationsForItem body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsLocationsSetAllPut");

            var localVarPath = "./Inventory/Items/{itemId}/Locations/SetAll";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.PUT, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsLocationsSetAllPut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsLocationsSetAllPutAsync(string itemId, SetAllLocationsForItem body = null)
        {
            await ItemsLocationsSetAllPutAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsLocationsSetAllPutAsyncWithHttpInfo(string itemId, SetAllLocationsForItem body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsLocationsSetAllPut");

            var localVarPath = "./Inventory/Items/{itemId}/Locations/SetAll";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.PUT, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsLocationsSetAllPut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsVariationsCreateVariationPost(string itemId, CreateVariation body = null)
        {
            ItemsVariationsCreateVariationPostWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsVariationsCreateVariationPostWithHttpInfo(string itemId, CreateVariation body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsVariationsCreateVariationPost");

            var localVarPath = "./Inventory/Items/{itemId}/Variations";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.POST, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsVariationsCreateVariationPost", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsVariationsCreateVariationPostAsync(string itemId, CreateVariation body = null)
        {
            await ItemsVariationsCreateVariationPostAsyncWithHttpInfo(itemId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsVariationsCreateVariationPostAsyncWithHttpInfo(string itemId, CreateVariation body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsVariationsCreateVariationPost");

            var localVarPath = "./Inventory/Items/{itemId}/Variations";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.POST, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsVariationsCreateVariationPost", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsVariationsNamePut(string itemId, string variationId, UpdateItemVariationName body = null)
        {
            ItemsVariationsNamePutWithHttpInfo(itemId, variationId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsVariationsNamePutWithHttpInfo(string itemId, string variationId, UpdateItemVariationName body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsVariationsNamePut");

            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling ItemsApi->ItemsVariationsNamePut");

            var localVarPath = "./Inventory/Items/{itemId}/Variations/{variationId}/Name";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null)
                localVarPathParams.Add("variationId", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.PUT, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsVariationsNamePut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsVariationsNamePutAsync(string itemId, string variationId, UpdateItemVariationName body = null)
        {
            await ItemsVariationsNamePutAsyncWithHttpInfo(itemId, variationId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsVariationsNamePutAsyncWithHttpInfo(string itemId, string variationId, UpdateItemVariationName body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsVariationsNamePut");

            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling ItemsApi->ItemsVariationsNamePut");

            var localVarPath = "./Inventory/Items/{itemId}/Variations/{variationId}/Name";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null)
                localVarPathParams.Add("variationId", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.PUT, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsVariationsNamePut", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ItemsVariationsRemoveVariationDelete(string itemId, string variationId, RemoveVariation body = null)
        {
            ItemsVariationsRemoveVariationDeleteWithHttpInfo(itemId, variationId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ItemsVariationsRemoveVariationDeleteWithHttpInfo(string itemId, string variationId, RemoveVariation body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsVariationsRemoveVariationDelete");

            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling ItemsApi->ItemsVariationsRemoveVariationDelete");

            var localVarPath = "./Inventory/Items/{itemId}/Variations/{variationId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null)
                localVarPathParams.Add("variationId", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath, Method.DELETE, localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsVariationsRemoveVariationDelete", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async Task ItemsVariationsRemoveVariationDeleteAsync(string itemId, string variationId, RemoveVariation body = null)
        {
            await ItemsVariationsRemoveVariationDeleteAsyncWithHttpInfo(itemId, variationId, body);
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="variationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ItemsVariationsRemoveVariationDeleteAsyncWithHttpInfo(
            string itemId, string variationId, RemoveVariation body = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->ItemsVariationsRemoveVariationDelete");

            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling ItemsApi->ItemsVariationsRemoveVariationDelete");

            var localVarPath = "./Inventory/Items/{itemId}/Variations/{variationId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {"application/json", "text/json", "application/_*+json"};
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] { };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null)
                localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null)
                localVarPathParams.Add("variationId", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if ((body != null) && (body.GetType() != typeof(byte[])))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath, Method.DELETE, localVarQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsVariationsRemoveVariationDelete", localVarResponse);

                if (exception != null)
                    throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), null);
        }

        #endregion
    }
}